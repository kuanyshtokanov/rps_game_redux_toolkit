import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchTables } from '@helpers/tablesAPI';

const game = {
  gameId: null,
  isStarted: false,
  progress: 0,
  winAmount: 0,
  selectedHand: null,
  opponentHand: null,
  bet: 0,
  status: 'waiting'
}

const initialState = {
  tables: [...new Array(2)].map((item, idx)=> {
    return {...game, gameId:idx}
  }),
  currentGame: null,
  balance: 5000,
  // new Array(2).fill({...game, gameId}),
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'tables/fetchTables',
  async () => {
    const response = await fetchTables();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const tablesSlice = createSlice({
  name: 'tables',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToBalance:  (state, action) => {
      state.value += action.payload;
    },
    withdrawBalance:  (state, action) => {
      state.value -= action.payload;
    },
    selectCurrentGame: (state, action) => {
      state.currentGame = action.payload;
    },
    selectHand: (state, action) => {
      if(state.currentGame !== null && state.tables[state.currentGame].status !== 'finished'){
        state.tables[action.payload.gameId].selectedHand = action.payload.hand;
        if(state.currentGame !== null && state.tables[state.currentGame].bet > 0){
          tablesSlice.caseReducers.startGame(state, action);
        }
      }
    },
    selectOpponentHand: (state, action) => {
      state.tables[action.payload.gameId].opponentHand = action.payload.hand;
    },
    chooseBet: (state, action) => {
      if (state.currentGame !== null && state.tables[state.currentGame].status !== 'finished'){
        console.log('chooseBet', state)
        state.tables[state.currentGame].bet = action.payload;
        if(state.tables[state.currentGame].selectedHand !== null){
          tablesSlice.caseReducers.startGame(state, action);
        }
      }
    },
    startGame: (state, action) => {
      state.tables[state.currentGame].isStarted = true;
      state.tables[state.currentGame].status = 'started'
    },
    stopGame: (state, action) => {
      console.log('stop game')
      state.tables[action.payload].isStarted = false;
      state.tables[action.payload].status = 'finished'
    },
    stepProgress: (state, action) => {
      if (state.tables[action.payload].progress <= 9){
        if (state.tables[action.payload].progress < 9){
          state.tables[action.payload].progress += 1
        } else {
          console.log('stop')
          state.tables[action.payload].progress += 1
          tablesSlice.caseReducers.stopGame(state, action);
        }
      }
    },
    resetCurGame: (state, action) => {
      console.log('reset game')
      state.tables[state.currentGame] = game;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.value += action.payload;
      });
  },
});

export const {
  addToBalance,
  withdrawBalance,
  selectCurrentGame,
  stepProgress,
  selectHand,
  startGame,
  chooseBet,
  stopGame,
  resetCurGame,
  selectOpponentHand } = tablesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selecTables = (state) => state.tables;

export const fetchGame = (state) => {
  return state.tables.tables[state.currentGame];
}

export const fetchSelectedHand = (state) => {
  return state.tables.tables[state.currentGame] ? state.tables.tables[state.currentGame].selectedHand : undefined;
}

export const fetchCurrentGame = (state) => state.tables.currentGame;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selecTables(getState());
  if (currentValue % 2 === 1) {
    dispatch(addToBalance(amount));
  }
};

export default tablesSlice.reducer;
