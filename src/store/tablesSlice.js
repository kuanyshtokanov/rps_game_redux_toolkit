import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchTables } from '@helpers/tablesAPI';

const game = {
  gameId: null,
  bet: 0,
  started: false,
  progress: 0,
}

const initialState = {
  tables: [...new Array(2)].map((item, idx)=> {
    return {...game, gameId:idx}
  }),
  currentGame: null,
  balance: 5000,
  // new Array(2).fill({...game, gameId}),
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'tables/fetchTables',
  async () => {
    const response = await fetchTables();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const tablesSlice = createSlice({
  name: 'tables',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToBalance:  (state, action) => {
      state.value += action.payload;
    },
    withdrawBalance:  (state, action) => {
      state.value -= action.payload;
    },
    selectCurrentGame: (state, action) => {
      console.log('log', action.payload)
      state.currentGame = action.payload;
    },
    stepProgress: (state) => {
      console.log('state', state.tables[state.currentGame])
      if (state.tables[state.currentGame].progress < 1){
        state.tables[state.currentGame].progress += 0.1
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.value += action.payload;
      });
  },
});

export const { addToBalance, withdrawBalance, selectCurrentGame, stepProgress } = tablesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selecTables = (state) => state.tables;

export const fetchGame = (state) => {
  return state.tables.tables[state.currentGame];
}

export const fetchCurrentGame = (state) => state.tables.currentGame;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selecTables(getState());
  if (currentValue % 2 === 1) {
    dispatch(addToBalance(amount));
  }
};

export default tablesSlice.reducer;
